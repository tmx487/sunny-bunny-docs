const fs = require('fs-extra');
const path = require('path');
const { execSync } = require('child_process');
const matter = require('gray-matter');
const config = require('./content-filter.config.cjs');

const VAULT_REPO = 'https://github.com/tmx487/learn-vault.git';
const TEMP_DIR = './temp-vault';
const CONTENT_DIR = './content';

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–∫–ª—é—á–∏—Ç—å —Ñ–∞–π–ª
function shouldExcludeFile(filePath, relativePath, fileContent = '') {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –ø–∞–ø–∫–∞–º
  for (const folder of config.excludedFolders) {
    if (relativePath.includes(folder)) {
      console.log(`üö´ –ò—Å–∫–ª—é—á–µ–Ω –ø–æ –ø–∞–ø–∫–µ "${folder}": ${relativePath}`);
      return true;
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∏–º–µ–Ω–∞–º —Ñ–∞–π–ª–æ–≤
  const fileName = path.basename(filePath);
  if (config.excludedFiles.includes(fileName)) {
    console.log(`üö´ –ò—Å–∫–ª—é—á–µ–Ω –ø–æ –∏–º–µ–Ω–∏: ${fileName}`);
    return true;
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
  for (const pattern of config.excludedPatterns) {
    if (pattern.test(fileName)) {
      console.log(`üö´ –ò—Å–∫–ª—é—á–µ–Ω –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É: ${fileName}`);
      return true;
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ frontmatter (—Ç–æ–ª—å–∫–æ –¥–ª—è .md —Ñ–∞–π–ª–æ–≤)
  if (path.extname(filePath) === '.md' && fileContent) {
    try {
      const parsed = matter(fileContent);
      const frontmatter = parsed.data;
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ frontmatter –ø–æ–ª—è–º
      for (const [key, value] of Object.entries(config.excludedByFrontmatter)) {
        if (frontmatter[key] === value) {
          console.log(`üö´ –ò—Å–∫–ª—é—á–µ–Ω –ø–æ frontmatter ${key}=${value}: ${fileName}`);
          return true;
        }
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Ç–µ–≥–∞–º
      const tags = frontmatter.tags || frontmatter.tag || [];
      const tagsArray = Array.isArray(tags) ? tags : [tags];
      
      for (const tag of tagsArray) {
        if (config.excludedTags.includes(tag)) {
          console.log(`üö´ –ò—Å–∫–ª—é—á–µ–Ω –ø–æ —Ç–µ–≥—É "${tag}": ${fileName}`);
          return true;
        }
      }
    } catch (error) {
      console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ frontmatter –≤ ${fileName}: ${error.message}`);
    }
  }
  
  return false;
}

// –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
function copyWithFilter(srcDir, destDir, basePath = '') {
  const items = fs.readdirSync(srcDir);
  
  for (const item of items) {
    const srcPath = path.join(srcDir, item);
    const relativePath = path.join(basePath, item);
    const destPath = path.join(destDir, relativePath);
    
    const stat = fs.statSync(srcPath);
    
    if (stat.isDirectory()) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å–∫–ª—é—á–µ–Ω–∞ –ª–∏ –ø–∞–ø–∫–∞
      if (!shouldExcludeFile(srcPath, relativePath)) {
        fs.ensureDirSync(destPath);
        copyWithFilter(srcPath, destDir, relativePath);
      }
    } else if (stat.isFile()) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
      const ext = path.extname(item).toLowerCase();
      const allowedExtensions = ['.md', '.png', '.jpg', '.jpeg', '.gif', '.svg', '.pdf'];
      
      if (allowedExtensions.includes(ext)) {
        // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ frontmatter
        const fileContent = ext === '.md' ? fs.readFileSync(srcPath, 'utf8') : '';
        
        if (!shouldExcludeFile(srcPath, relativePath, fileContent)) {
          fs.ensureDirSync(path.dirname(destPath));
          fs.copyFileSync(srcPath, destPath);
          console.log(`‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: ${relativePath}`);
        }
      } else {
        console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω (–Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç): ${relativePath}`);
      }
    }
  }
}

async function syncVault() {
  try {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é vault...');
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    if (fs.existsSync(TEMP_DIR)) {
      fs.removeSync(TEMP_DIR);
    }
    
    // –ö–ª–æ–Ω–∏—Ä—É–µ–º vault
    console.log('üì• –ö–ª–æ–Ω–∏—Ä—É–µ–º vault...');
    execSync(`git clone ${VAULT_REPO} ${TEMP_DIR}`, { stdio: 'inherit' });
    
    // –û—á–∏—â–∞–µ–º content
    console.log('üßπ –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç...');
    if (fs.existsSync(CONTENT_DIR)) {
      fs.removeSync(CONTENT_DIR);
    }
    fs.ensureDirSync(CONTENT_DIR);
    
    // –ö–æ–ø–∏—Ä—É–µ–º —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
    console.log('üìã –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤...');
    copyWithFilter(TEMP_DIR, CONTENT_DIR);
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    const indexPath = path.join(CONTENT_DIR, 'index.md');
    if (!fs.existsSync(indexPath)) {
      const indexContent = `---
      title: –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
      ---

      # sunny-bunny-docs-vault.

      ---

      *–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${new Date().toLocaleDateString('ru-RU')}*
      `;
      fs.writeFileSync(indexPath, indexContent);
      console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∞ –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞');
    }
    
    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
    fs.removeSync(TEMP_DIR);
    
    console.log('üéâ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const files = execSync(`find ${CONTENT_DIR} -name "*.md" | wc -l`).toString().trim();
    console.log(`üìä –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –∑–∞–º–µ—Ç–æ–∫: ${files}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error.message);
    process.exit(1);
  }
}

syncVault();